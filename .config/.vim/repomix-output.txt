This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-17T20:42:50.963Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
lua/
  core/
    init.lua
    keys.lua
    options.lua
    plugins.lua
  plugins/
    config/
      auto-session.lua
      comment.lua
      dial.lua
      flutter-tools.lua
      hop.lua
      indent-blankline.lua
      lazygit.lua
      lualine.lua
      mason.lua
      nightfox.lua
      nvim-cmp.lua
      nvim-colorizer.lua
      nvim-dap.lua
      nvim-neoclip.lua
      nvim-scrollbar.lua
      nvim-tree.lua
      nvim-treesitter.lua
      telescope-file-browser.lua
      telescope.lua
      toggleterm.lua
      vim-matchup.lua
      which-key.lua
      winresizer.lua
    dein.lua
    lazy_plugins.lua
  .luarc.json
init.lua
lazy-lock.json
luarc.json

================================================================
Files
================================================================

================
File: lua/core/init.lua
================
local api = vim.api

vim.cmd('augroup MyAutoCmd')
vim.cmd('autocmd!')
vim.cmd('augroup END')

vim.cmd('filetype off')
vim.cmd('syntax off')
-- vim.api.nvim_exec('language en_US', true)


vim.g.mapleader = " "
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

local vars = {
  python_host_prog = '/usr/bin/python2',
  python3_host_prog = '/usr/bin/python3',
  loaded_matchparen = 1,
  vimsyn_embed = 1,
  loaded_python_provider = 0,
  loaded_perl_provider = 0,
  loaded_ruby_provider = 0,
  loaded_rrhelper = 1,
  loaded_vimball = 1,
  loaded_vimballPlugin = 1,
  loaded_getscript = 1,
  loaded_getscriptPlugin = 1,
  loaded_logipat = 1,
  loaded_man = 1,
}

for var, val in pairs(vars) do
  api.nvim_set_var(var, val)
end

vim.cmd('filetype plugin indent on')
vim.cmd('syntax on')

vim.cmd('command! ToggleNum set rnu!')

vim.cmd([[
if executable('fctix')
  autocmd InsertLeave * :call system('fctix-remote -c')
  autocmd CmdluneLeave * :call system('fctix-remote -c')
]]
)

vim.env.MYVIMDEIN = '~/.vim/dein.toml'

api.nvim_create_user_command('Memo', function(opts)
  vim.cmd("e ".."~/dev/memo/"..os.date("%Y%m%d").."memo.md")
end,
{}
)
api.nvim_create_user_command('Todo', function(opts)
  vim.cmd("e ".."~/dev/Todo.md")
end,
{}
)
api.nvim_create_user_command('Cd', function(opts)
  vim.cmd("cd%:p:h")
end,
{}
)
api.nvim_create_user_command('CdVimSetting', function(opts)
  vim.cmd("cd ~/.vim")
end,
{}
)
api.nvim_create_user_command('CdDevTmp', function(opts)
  vim.cmd("cd ~/dev/tmp/")
end,
{}
)

================
File: lua/core/keys.lua
================
local api = vim.api

api.nvim_set_keymap('i', 'jj', '<esc>', { noremap = true })
api.nvim_set_keymap('i', 'っj', '<esc>', { noremap = true })
api.nvim_set_keymap('i', '<c-o>', '<left><c-o>', { noremap = true })
api.nvim_set_keymap('n', '<c-h>', '<c-w><c-h>', { noremap = true })
api.nvim_set_keymap('n', '<c-j>', '<c-w><c-j>', { noremap = true })
api.nvim_set_keymap('n', '<c-k>', '<c-w><c-k>', { noremap = true })
api.nvim_set_keymap('n', '<c-l>', '<c-w><c-l>', { noremap = true })
api.nvim_set_keymap('n', ';', ':', { noremap = true})

api.nvim_set_keymap('t', '<c-q>', '<c-\\><c-n><c-w>q', {noremap=true})
api.nvim_set_keymap('t', '<esc>', '<c-\\><c-n>', {noremap=true})

api.nvim_set_keymap('n','<c-p>',':let @*=expand(\'%:p\')<cr> :let @+=expand(\'%:p\')<cr>:echo expand(\'%:p\')<cr>',{noremap=true})
api.nvim_set_keymap('n', '%', ':source %<cr>:echo \'source % done.\'<cr>', {noremap = true})

api.nvim_set_keymap('n', '%', ':source %<cr>:echo \'source % done.\'<cr>', {noremap = true})
api.nvim_set_keymap('n', '%', ':source %<cr>:echo \'source % done.\'<cr>', {noremap = true})

================
File: lua/core/options.lua
================
function SetOptions()
  local api = vim.api

  local opts = {
    splitright = true,
    splitbelow = true,
    clipboard = 'unnamedplus',
    hlsearch = true,
    mouse = 'a',
    whichwrap = 'b,s,h,l,<,>,[,]',
    ignorecase = true,
    wrapscan = true,
    smartcase = true,
    pumheight = 10,
    lazyredraw = true,
    showcmd = false,
    guicursor = vim.o.guicursor..',a:blinkon0',
    encoding = 'utf-8',
    fileencoding = 'utf-8',
    undodir = vim.env.HOME..'/.local/share/nvim/backup',
    breakindent = true,
    termguicolors = true,
    showmatch = true,
    matchtime = 1
  }

  local wopts = {
    cursorline = true,
    signcolumn = 'yes',
    number = true,
    relativenumber = true,
    foldmethod = 'marker'
  }

  local bopts = {
    autoindent = true,
    smartindent = true,
    tabstop = 2,
    shiftwidth = 2,
    expandtab = true,
    undofile = true,
    swapfile = false
  }

  for opt, val in pairs(opts) do
    vim.api.nvim_set_option(opt, val)
  end

  for opt, val in pairs(wopts) do
    vim.api.nvim_win_set_option(0, opt, val)
  end

  for opt, val in pairs(bopts) do
    vim.api.nvim_buf_set_option(0, opt, val)
  end
end

SetOptions()
vim.cmd('set clipboard+=unnamedplus')

vim.cmd('autocmd FileType * lua SetOptions()')
vim.opt.runtimepath:append('~/.vim')

vim.o.termguicolors = true

================
File: lua/core/plugins.lua
================
-- setup lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

vim.g["denops#deno"] = vim.fn.getenv('DENO_PATH')

plugins = require('plugins.lazy_plugins')

require('lazy').setup(plugins)

-- setup screenshot
local api = vim.api

================
File: lua/plugins/config/auto-session.lua
================
require("auto-session").setup {
  log_level = "error",
  auto_session_suppress_dirs = { "~/dev/*"},
}

================
File: lua/plugins/config/comment.lua
================
require('Comment').setup()

================
File: lua/plugins/config/dial.lua
================
local augend = require("dial.augend")
require("dial.config").augends:register_group {
  default = {
    augend.integer.alias.decimal,
    augend.integer.alias.hex,
    augend.date.alias["%Y/%m/%d"],
    augend.date.alias["%Y-%m-%d"],
    augend.date.alias["%Y年%-m月%-d日"],
    augend.date.alias["%Y年%-m月%-d日(%ja)"],
    augend.constant.alias.ja_weekday,
    augend.constant.alias.ja_weekday_full,
    augend.constant.alias.bool,
    augend.semver.alias.semver,
  },
  typescript = {
    augend.integer.alias.decimal,
    augend.integer.alias.hex,
    augend.constant.new { elements = { "let", "const" } },
  },
  visual = {
    augend.integer.alias.decimal,
    augend.integer.alias.hex,
    augend.date.alias["%Y/%m/%d"],
    augend.constant.alias.alpha,
    augend.constant.alias.Alpha,
  },
}

================
File: lua/plugins/config/flutter-tools.lua
================
require("flutter-tools").setup {
  ui = {
    border = "none",
  },
  decorations = {
    statusline = {
      app_version = false,
      device = false,
    }
  },
  debugger = {
    enabled = false,
    run_via_dap = false,
  },
  fvm = true,
  widget_guides = {
    enabled = true,
  },
  closing_tags = {
    highlight = "ClosingTags",
    prefix = " ",
    enabled = true
  },
  dev_log = {
    enabled = true,
    open_cmd = "tabedit",
  },
  dev_tools = {
    autostart = false,
    auto_open_browser = false,
  },
  outline = {
    open_cmd = "30vnew",
    auto_open = false
  },
  lsp = {
    on_attach = function(client, bufnr)
      vim.cmd [[hi FlutterWidgetGuides ctermfg=237 guifg=#33374c]]
      vim.cmd [[hi ClosingTags ctermfg=244 guifg=#8389a3]]
      on_attach(client, bufnr)
    end,
    capabilities = capabilities,
    settings = {
      showTodos = false,
      completeFunctionCalls = true,
      analysisExcludedFolders = {
        "~/.pub-cache",
        "~/fvm"
      }
    }
  }
}

================
File: lua/plugins/config/hop.lua
================
require("hop").setup {
  multi_windows = true,
}

================
File: lua/plugins/config/indent-blankline.lua
================
vim.opt.list = true
vim.opt.listchars:append "eol:↴"

require("indent_blankline").setup {
    -- for example, context is off by default, use this to turn it on
    space_char_blankline = " ",
    show_current_context = true,
    show_current_context_start = true,
}

================
File: lua/plugins/config/lazygit.lua
================
require('telescope').load_extension('lazygit')

================
File: lua/plugins/config/lualine.lua
================
local function selectionCount()
	local mode = vim.fn.mode()
	local start_line, end_line, start_pos, end_pos

	-- 選択モードでない場合には無効
	if not (mode:find("[vV\22]") ~= nil) then
		return ""
	end
	start_line = vim.fn.line("v")
	end_line = vim.fn.line(".")

	if mode == "V" then
		-- 行選択モードの場合は、各行全体をカウントする
		start_pos = 1
		end_pos = vim.fn.strlen(vim.fn.getline(end_line)) + 1
	else
		start_pos = vim.fn.col("v")
		end_pos = vim.fn.col(".")
	end

	local chars = 0
	for i = start_line, end_line do
		local line = vim.fn.getline(i)
		local line_len = vim.fn.strlen(line)
		local s_pos = (i == start_line) and start_pos or 1
		local e_pos = (i == end_line) and end_pos or line_len + 1
		chars = chars + vim.fn.strchars(line:sub(s_pos, e_pos - 1))
	end

	local lines = math.abs(end_line - start_line) + 1
	return tostring(lines) .. " lines, " .. tostring(chars) .. " characters"
end

local function lsp_clients()
	local clients = vim.lsp.get_clients({ bufnr = 0 })
	if next(clients) == nil then
		return " no lspclients"
	end
	local client_names = {}
	for _, client in pairs(clients) do
		table.insert(client_names, client.name)
	end
	return "LSP:" .. table.concat(client_names, ", ")
end

-- local function lsp_names()
--   local clients = {}
--   for _, client in ipairs(vim.lsp.get_clients { bufnr = 0 }) do
--     if client.name == 'null-ls' then
--       local sources = {}
--       for _, source in ipairs(require('null-ls.sources').get_available(vim.bo.filetype)) do
--         table.insert(sources, source.name)
--       end
--       table.insert(clients, 'null-ls(' .. table.concat(sources, ', ') .. ')')
--     else
--       table.insert(clients, client.name)
--     end
--   end
--   return ' ' .. table.concat(clients, ', ')
-- end
require("lualine").setup({
	options = {
		icons_enabled = true,
		theme = "auto",
		component_separators = { left = "|", right = "|" },
		section_separators = { left = "", right = "" },
		disabled_filetypes = {},
		always_divide_middle = true,
		colored = false,
	},
	sections = {
		lualine_a = { "mode" },
		lualine_b = { "branch", "diff" },
		lualine_c = {
			{
				"filename",
				path = 1,
				file_status = true,
				shorting_target = 40,
				symbols = {
					modified = " [+]",
					readonly = " [RO]",
					unnamed = "Untitled",
				},
			},
		},
		lualine_x = {
			{ "searchcount" },
			{ selectionCount },
			{
				"diagnostics",
				sources = {
					"nvim_diagnostic",
					"nvim_lsp",
				},

				sections = { "error", "warn", "info", "hint" },

				diagnostics_color = {
					error = "DiagnosticError",
					warn = "DiagnosticWarn",
					info = "DiagnosticInfo",
					hint = "DiagnosticHint",
				},
				symbols = { error = "E", warn = "W", info = "I", hint = "H" },
				colored = true,
				update_in_insert = false,
				always_visible = false,
			},
			{ lsp_clients },
		},
		lualine_y = { "filetype", "encoding" },
		lualine_z = {
			"location",
			"progress",
		},
	},
	inactive_sections = {
		lualine_a = {},
		lualine_b = {},
		lualine_c = { "filename" },
		lualine_x = { "location" },
		lualine_y = {},
		lualine_z = {},
	},
	tabline = {
		lualine_a = {
			{
				"buffers",
				mode = 4,
				icons_enabled = true,
				show_filename_only = true,
				hide_filename_extensions = false,
			},
		},
		lualine_b = {},
		lualine_c = {},
		lualine_x = {},
		lualine_y = {},
		lualine_z = { "tabs" },
	},
	extensions = {},
})

================
File: lua/plugins/config/mason.lua
================
local lspconfig = require("lspconfig")
local nlspsettings = require("nlspsettings")

nlspsettings.setup({
  config_home = vim.fn.stdpath('config') .. '/nlsp-settings',
  local_settings_dir = ".nlsp-settings",
  local_settings_root_markers_fallback = { '.git' },
  append_default_schemas = true,
  loader = 'json'
})

function on_attach(client, bufnr)
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
end

local global_capabilities = vim.lsp.protocol.make_client_capabilities()
global_capabilities.textDocument.completion.completionItem.snippetSupport = true

lspconfig.util.default_config = vim.tbl_extend("force", lspconfig.util.default_config, {
  capabilities = global_capabilities,
})


require('mason').setup {
  ui = {
    check_outdated_packages_on_open = false,
    border = 'single',
  },
}

require("mason-lspconfig").setup {
	ensure_installed = {
			"lua_ls",
			"bashls",
			"clangd",
			"cmake",
			"cssls",
			"dockerls",
			"docker_compose_language_service",
			"gopls",
			"html",
			"jsonls",
			"jdtls",
	}
}

require('mason-lspconfig').setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {}
  end,
}

================
File: lua/plugins/config/nightfox.lua
================
require('nightfox').setup({})
vim.cmd('colorscheme nightfox')

================
File: lua/plugins/config/nvim-cmp.lua
================
local cmp = require('cmp')
local lspkind = require('lspkind')

cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn['vsnip#anonymous'](args.body)
    end
  },

  -- window = {
  --   completion = cmp.config.window.bordered({
  --     border = 'single'
  --   }),
  --   documentation = cmp.config.window.bordered({
  --     border = 'single'
  --   }),
  -- },

  mapping = cmp.mapping.preset.insert({
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<Enter>'] = cmp.mapping.abort(),
    ['<C-y>'] = cmp.mapping.confirm({ select = true }),
  }),

  formatting = {
    format = lspkind.cmp_format({
      mode = 'symbol',
      maxwidth = 50,
      ellipsis_char = '...',
    })
  },

  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'nvim_lsp_signature_help' },
    { name = 'path' },
    { name = 'buffer' },
    { name = 'nvim_lua' },
    { name = 'vsnip' },
    { name = 'calc' },
    { name = 'emoji' },
    { name = 'skkeleton'},
  }),

  experimental = {
    ghost_text = true
  }
})

cmp.setup.cmdline({ '/', '?' }, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'nvim_lsp_document_symbol' }
  }, {
    { name = 'buffer' }
  })
})
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline({
    ['<C-n>'] = cmp.mapping(cmp.mapping.select_next_item(),{'i', 'c'}),
    ['<C-p>'] = cmp.mapping(cmp.mapping.select_prev_item(),{'i', 'c'}),
    ['<Enter>'] = cmp.mapping(cmp.mapping.abort(),{'i', 'c'}),
    ['<C-y>'] = cmp.mapping(cmp.mapping.confirm({ select = true }),{'i', 'c'}),
  }
  ),
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline', keyword_length = 2 }
  })
})

================
File: lua/plugins/config/nvim-colorizer.lua
================
require'colorizer'.setup{
  filetypes = { "*" },
  user_default_options = {
    RGB = true, -- #RGB hex codes
    RRGGBB = true, -- #RRGGBB hex codes
    names = true, -- "Name" codes like Blue or blue
    RRGGBBAA = false, -- #RRGGBBAA hex codes
    AARRGGBB = false, -- 0xAARRGGBB hex codes
    rgb_fn = true, -- CSS rgb() and rgba() functions
    hsl_fn = false, -- CSS hsl() and hsla() functions
    css = false, -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB
    css_fn = false, -- Enable all CSS *functions*: rgb_fn, hsl_fn
    -- Available modes for `mode`: foreground, background,  virtualtext
    mode = "background", -- Set the display mode.
    -- Available methods are false / true / "normal" / "lsp" / "both"
    -- True is same as normal
    tailwind = false, -- Enable tailwind colors
    -- parsers can contain values used in |user_default_options|
    sass = { enable = false, parsers = { "css" }, }, -- Enable sass colors
    virtualtext = "■",
    -- update color values even if buffer is not focused
    -- example use: cmp_menu, cmp_docs
    always_update = false
  },
  -- all the sub-options of filetypes apply to buftypes
  buftypes = {},
}

================
File: lua/plugins/config/nvim-dap.lua
================
local M = {}

M.config = function()
  lvim.builtin.dap = {
    active = true,
    on_config_done = nil,
    breakpoint = {
      text = lvim.icons.ui.Bug,
      texthl = "DiagnosticSignError",
      linehl = "",
      numhl = "",
    },
    breakpoint_rejected = {
      text = lvim.icons.ui.Bug,
      texthl = "DiagnosticSignError",
      linehl = "",
      numhl = "",
    },
    stopped = {
      text = lvim.icons.ui.BoldArrowRight,
      texthl = "DiagnosticSignWarn",
      linehl = "Visual",
      numhl = "DiagnosticSignWarn",
    },
    log = {
      level = "info",
    },
    ui = {
      auto_open = true,
      notify = {
        threshold = vim.log.levels.INFO,
      },
      config = {
        icons = { expanded = "", collapsed = "", circular = "" },
        mappings = {
          -- Use a table to apply multiple mappings
          expand = { "<CR>", "<2-LeftMouse>" },
          open = "o",
          remove = "d",
          edit = "e",
          repl = "r",
          toggle = "t",
        },
        -- Use this to override mappings for specific elements
        element_mappings = {},
        expand_lines = true,
        layouts = {
          {
            elements = {
              { id = "scopes", size = 0.33 },
              { id = "breakpoints", size = 0.17 },
              { id = "stacks", size = 0.25 },
              { id = "watches", size = 0.25 },
            },
            size = 0.33,
            position = "right",
          },
          {
            elements = {
              { id = "repl", size = 0.45 },
              { id = "console", size = 0.55 },
            },
            size = 0.27,
            position = "bottom",
          },
        },
        controls = {
          enabled = true,
          -- Display controls in this element
          element = "repl",
          icons = {
            pause = "",
            play = "",
            step_into = "",
            step_over = "",
            step_out = "",
            step_back = "",
            run_last = "",
            terminate = "",
          },
        },
        floating = {
          max_height = 0.9,
          max_width = 0.5, -- Floats will be treated as percentage of your screen.
          border = "rounded",
          mappings = {
            close = { "q", "<Esc>" },
          },
        },
        windows = { indent = 1 },
        render = {
          max_type_length = nil, -- Can be integer or nil.
          max_value_lines = 100, -- Can be integer or nil.
        },
      },
    },
  }
end

M.setup = function()
  local status_ok, dap = pcall(require, "dap")
  if not status_ok then
    return
  end

  if lvim.use_icons then
    vim.fn.sign_define("DapBreakpoint", lvim.builtin.dap.breakpoint)
    vim.fn.sign_define("DapBreakpointRejected", lvim.builtin.dap.breakpoint_rejected)
    vim.fn.sign_define("DapStopped", lvim.builtin.dap.stopped)
  end

  dap.set_log_level(lvim.builtin.dap.log.level)

  if lvim.builtin.dap.on_config_done then
    lvim.builtin.dap.on_config_done(dap)
  end
end

M.setup_ui = function()
  local status_ok, dap = pcall(require, "dap")
  if not status_ok then
    return
  end
  local dapui = require "dapui"
  dapui.setup(lvim.builtin.dap.ui.config)

  if lvim.builtin.dap.ui.auto_open then
    dap.listeners.after.event_initialized["dapui_config"] = function()
      dapui.open()
    end
    -- dap.listeners.before.event_terminated["dapui_config"] = function()
    --   dapui.close()
    -- end
    -- dap.listeners.before.event_exited["dapui_config"] = function()
    --   dapui.close()
    -- end
  end

  local Log = require "lvim.core.log"

  -- until rcarriga/nvim-dap-ui#164 is fixed
  local function notify_handler(msg, level, opts)
    if level >= lvim.builtin.dap.ui.notify.threshold then
      return vim.notify(msg, level, opts)
    end

    opts = vim.tbl_extend("keep", opts or {}, {
      title = "dap-ui",
      icon = "",
      on_open = function(win)
        vim.api.nvim_set_option_value("filetype", "markdown", { buf = vim.api.nvim_win_get_buf(win) })
      end,
    })

    -- vim_log_level can be omitted
    if level == nil then
      level = Log.levels["INFO"]
    elseif type(level) == "string" then
      level = Log.levels[(level):upper()] or Log.levels["INFO"]
    else
      -- https://github.com/neovim/neovim/blob/685cf398130c61c158401b992a1893c2405cd7d2/runtime/lua/vim/lsp/log.lua#L5
      level = level + 1
    end

    msg = string.format("%s: %s", opts.title, msg)
    Log:add_entry(level, msg)
  end

  local dapui_ok, _ = xpcall(function()
    require("dapui.util").notify = notify_handler
  end, debug.traceback)
  if not dapui_ok then
    Log:debug "Unable to override dap-ui logging level"
  end
end

return M

================
File: lua/plugins/config/nvim-neoclip.lua
================
require('neoclip').setup()

================
File: lua/plugins/config/nvim-scrollbar.lua
================
require("scrollbar").setup()

================
File: lua/plugins/config/nvim-tree.lua
================
local api = require('nvim-tree.api')

local function my_on_attach(bufnr)
  local function opts(desc)
    return { desc = 'nvim-tree: ' .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
  end

  -- Default mappings. Feel free to modify or remove as you wish.
  -- BEGIN_DEFAULT_ON_ATTACH
  -- vim.keymap.set('n', '<C-]>', api.tree.change_root_to_node,          opts('CD'))
  -- vim.keymap.set('n', '<C-e>', api.node.open.replace_tree_buffer,     opts('Open: In Place'))
  -- vim.keymap.set('n', '<C-k>', api.node.show_info_popup,              opts('Info'))
  -- vim.keymap.set('n', '<C-r>', api.fs.rename_sub,                     opts('Rename: Omit Filename'))
  -- vim.keymap.set('n', '<C-t>', api.node.open.tab,                     opts('Open: New Tab'))
  vim.keymap.set('n', '<C-v>', api.node.open.vertical, opts('Open: Vertical Split'))
  vim.keymap.set('n', '<C-s>', api.node.open.horizontal, opts('Open: Horizontal Split'))
  -- vim.keymap.set('n', '<BS>',  api.node.navigate.parent_close,        opts('Close Directory'))
  vim.keymap.set('n', '<BS>', api.node.navigate.parent_close, opts('Up'))
  vim.keymap.set('n', '<CR>', api.node.open.edit, opts('Open'))
  vim.keymap.set('n', '<Tab>', api.node.open.preview, opts('Open Preview'))
  vim.keymap.set('n', '>', api.node.navigate.sibling.next, opts('Next Sibling'))
  vim.keymap.set('n', '<', api.node.navigate.sibling.prev, opts('Previous Sibling'))
  vim.keymap.set('n', '.', api.node.run.cmd, opts('Run Command'))
  -- vim.keymap.set('n', '-',     api.tree.change_root_to_parent,        opts('Up'))
  vim.keymap.set('n', '-', api.tree.change_root_to_node, opts('CD'))
  vim.keymap.set('n', 'a', api.fs.create, opts('Create'))
  vim.keymap.set('n', 'bmv', api.marks.bulk.move, opts('Move Bookmarked'))
  vim.keymap.set('n', 'B', api.tree.toggle_no_buffer_filter, opts('Toggle No Buffer'))
  vim.keymap.set('n', 'c', api.fs.copy.node, opts('Copy'))
  vim.keymap.set('n', 'C', api.tree.toggle_git_clean_filter, opts('Toggle Git Clean'))
  vim.keymap.set('n', '[c', api.node.navigate.git.prev, opts('Prev Git'))
  vim.keymap.set('n', ']c', api.node.navigate.git.next, opts('Next Git'))
  vim.keymap.set('n', 'd', api.fs.remove, opts('Delete'))
  vim.keymap.set('n', 'D', api.fs.trash, opts('Trash'))
  vim.keymap.set('n', 'E', api.tree.expand_all, opts('Expand All'))
  vim.keymap.set('n', 'e', api.fs.rename_basename, opts('Rename: Basename'))
  vim.keymap.set('n', ']e', api.node.navigate.diagnostics.next, opts('Next Diagnostic'))
  vim.keymap.set('n', '[e', api.node.navigate.diagnostics.prev, opts('Prev Diagnostic'))
  vim.keymap.set('n', 'F', api.live_filter.clear, opts('Clean Filter'))
  vim.keymap.set('n', 'f', api.live_filter.start, opts('Filter'))
  vim.keymap.set('n', '?', api.tree.toggle_help, opts('Help'))
  vim.keymap.set('n', 'gy', api.fs.copy.absolute_path, opts('Copy Absolute Path'))
  vim.keymap.set('n', 'H', api.tree.toggle_hidden_filter, opts('Toggle Dotfiles'))
  vim.keymap.set('n', 'I', api.tree.toggle_gitignore_filter, opts('Toggle Git Ignore'))
  vim.keymap.set('n', 'J', api.node.navigate.sibling.last, opts('Last Sibling'))
  vim.keymap.set('n', 'K', api.node.navigate.sibling.first, opts('First Sibling'))
  vim.keymap.set('n', 'm', api.marks.toggle, opts('Toggle Bookmark'))
  vim.keymap.set('n', 'o', api.node.open.edit, opts('Open'))
  vim.keymap.set('n', 'O', api.node.open.no_window_picker, opts('Open: No Window Picker'))
  vim.keymap.set('n', 'p', api.fs.paste, opts('Paste'))
  vim.keymap.set('n', 'P', api.node.navigate.parent, opts('Parent Directory'))
  vim.keymap.set('n', 'q', api.tree.close, opts('Close'))
  vim.keymap.set('n', 'r', api.fs.rename, opts('Rename'))
  vim.keymap.set('n', 'R', api.tree.reload, opts('Refresh'))
  vim.keymap.set('n', 's', api.node.run.system, opts('Run System'))
  vim.keymap.set('n', 'S', api.tree.search_node, opts('Search'))
  vim.keymap.set('n', 'U', api.tree.toggle_custom_filter, opts('Toggle Hidden'))
  vim.keymap.set('n', 'W', api.tree.collapse_all, opts('Collapse'))
  vim.keymap.set('n', 'x', api.fs.cut, opts('Cut'))
  vim.keymap.set('n', 'y', api.fs.copy.filename, opts('Copy Name'))
  vim.keymap.set('n', 'Y', api.fs.copy.relative_path, opts('Copy Relative Path'))
  vim.keymap.set('n', '<2-LeftMouse>', api.node.open.edit, opts('Open'))
  vim.keymap.set('n', '<2-RightMouse>', api.tree.change_root_to_node, opts('CD'))
  -- END_DEFAULT_ON_ATTACH


  -- Mappings removed via:
  --   remove_keymaps
  --   OR
  --   view.mappings.list..action = ""
  --
  -- The dummy set before del is done for safety, in case a default mapping does not exist.
  --
  -- You might tidy things by removing these along with their default mapping.
  -- vim.keymap.set('n', 'O', '', { buffer = bufnr })
  -- vim.keymap.del('n', 'O', { buffer = bufnr })
  -- vim.keymap.set('n', '<2-RightMouse>', '', { buffer = bufnr })
  -- vim.keymap.del('n', '<2-RightMouse>', { buffer = bufnr })
  -- vim.keymap.set('n', 'D', '', { buffer = bufnr })
  -- vim.keymap.del('n', 'D', { buffer = bufnr })
  -- vim.keymap.set('n', 'E', '', { buffer = bufnr })
  -- vim.keymap.del('n', 'E', { buffer = bufnr })


  -- Mappings migrated from view.mappings.list
  --
  -- You will need to insert "your code goes here" for any mappings with a custom action_cb
  vim.keymap.set('n', 'A', api.tree.expand_all, opts('Expand All'))
  vim.keymap.set('n', '?', api.tree.toggle_help, opts('Help'))
  vim.keymap.set('n', 'C', api.tree.change_root_to_node, opts('CD'))
  vim.keymap.set('n', 'P', function()
    local node = api.tree.get_node_under_cursor()
    print(node.absolute_path)
  end, opts('Print Node Path'))

  vim.keymap.set('n', 'Z', api.node.run.system, opts('Run System'))
end

require('nvim-tree').setup {
  disable_netrw = true,
  hijack_netrw = true,
  auto_close = true,
  open_on_tab = false,
  hijack_cursor = false,
  update_cwd = false,
  update_focused_file = {
    enable      = false,
    update_cwd  = false,
    ignore_list = {}
  },
  system_open = {
    cmd  = nil,
    args = {}
  },
  view = {
    width = 40,
    side = 'left',
  },
  renderer = {
    highlight_git = true,
    icons = {
      git_placement = 'signcolumn',
      show = {
        git = true
      },
      glyphs = {
        default = '',
        symlink = '',
        git = {
          unstaged = " M",
          staged = "M ",
          unmerged = "",
          renamed = "R",
          untracked = "??",
          deleted = " D",
          ignored = "◌"
        },
        folder = {
          default = "",
          open = "",
          symlink = "",
          empty = "",
          empty_open = "",
          symlink_open = "",
        }
      }
    },
  },
  diagnostics = {
    enable = true,
    show_on_dirs = true,
    icons = {
      hint = "󱄋",
      info = "",
      warning = "",
      error = "",
    },
  },
  on_attach = my_on_attach,
}

================
File: lua/plugins/config/nvim-treesitter.lua
================
require('nvim-treesitter.configs').setup({
  ensure_installed = {
    'bash',
    'c',
    'cpp',
    'css',
    'go',
    'gomod',
    'html',
    'java',
    'javascript',
    'json',
    'lua',
    'python',
    'rust',
    'toml',
    'typescript',
    'yaml',
    'vue',
    'markdown',
    'cmake',
  },
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  incremental_selection = {
    enable = true,
  },
  refactor = {
    highlight_definitions = {
      enable = true,
    },
    highlight_current_scope = {
      enable = true,
    },
    smart_rename = {
      enable = true,
      keymaps = {
        smart_rename = 'grr',
      },
    },
    navigation = {
      enable = true,
      keymaps = {
        goto_definition = 'gnd',
        list_definitions = 'gnD',
        list_definitions_toc = 'gO',
        goto_next_usage = '<a-*>',
        goto_previous_usage = '<a-#>',
      },
    },
  },
  textobjects = {
    select = {
      enable = true,
      lookahead = true,
      keymaps = {
        ['af'] = '@function.outer',
        ['if'] = '@function.inner',
        ['ac'] = '@class.outer',
        ['ic'] = '@class.inner',
      },
    },
    swap = {
      enable = true,
      swap_next = {
        ['<leader>a'] = '@parameter.inner',
      },
      swap_previous = {
        ['<leader>A'] = '@parameter.inner',
      },
    },
    move = {
      enable = true,
      set_jumps = true,
      goto_next_start = {
        [']m'] = '@function.outer',
        [']]'] = '@class.outer',
      },
      goto_next_end = {
        [']M'] = '@function.outer',
        [']['] = '@class.outer',
      },
      goto_previous_start = {
        ['[m'] = '@function.outer',
        ['[['] = '@class.outer',
      },
      goto_previous_end = {
        ['[M'] = '@function.outer',
        ['[]'] = '@class.outer',
      },
    },
  },
})

================
File: lua/plugins/config/telescope-file-browser.lua
================
-- You don't need to set any of these options.
-- IMPORTANT!: this is only a showcase of how you can set default options!
-- To get telescope-file-browser loaded and working with telescope,
-- you need to call load_extension, somewhere after setup function:
require("telescope").load_extension "file_browser"

================
File: lua/plugins/config/telescope.lua
================
require("telescope").setup({
  defaults = {
    file_ignore_patterns = {
      -- 検索から除外するものを定
      "^.git/",
      "^.cache/",
    },
    vimgrep_arguments = {
      -- ripggrepコマンドのオプション
      "rg",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case",
      "-uu",
    },
  },
  extensions = {
    -- ソート性能を大幅に向上させるfzfを使う
    fzf = {
      fuzzy = true,
      override_generic_sorter = true,
      override_file_sorter = true,
      case_mode = "smart_case",
    },
    file_browser = {
      -- theme = "ivy",
      hijack_netrw = true,
      mappings = {
        ["i"] = {
          -- your custom insert mode mappings
        },
        ["n"] = {
          -- your custom insert mode mappings
        },
      },
    },
  },
})
require("telescope").load_extension("fzf")

================
File: lua/plugins/config/toggleterm.lua
================
require("toggleterm").setup()

-- local Terminal = require("toggleterm.terminal").Terminal
-- local lazygit = Terminal:new({
-- 	cmd = "lazygit",
-- 	direction = "float",
-- 	hidden = true
-- })
--
-- vim.api.nvim_set_keymap("n", "<leader>tt", ":ToggleTerm direction=float<CR>i", { noremap = true, silent = true })
-- -- lazygit
-- function _lazygit_toggle()
-- 	lazygit:toggle()
-- end
--
-- vim.api.nvim_set_keymap("n", "<leader>gg", "<cmd>lua _lazygit_toggle()<CR>", { noremap = true, silent = true })

================
File: lua/plugins/config/vim-matchup.lua
================
vim.g.matchup_matchparen_offscreen = { method = 'popup' }

================
File: lua/plugins/config/which-key.lua
================
vim.o.timeout = true
vim.o.timeoutlen = 300
local wk = require("which-key")

-- default keymap
wk.add({
  {
    "<C-a>",
    function()
      require("dial.map").manipulate("increment", "normal")
    end
    ,
    desc = "Increment"
  },
  {
    "<C-x>",
    function()
      require("dial.map").manipulate("decrement", "normal")
    end
    ,
    desc = "Decrement"
  },
})

-- leader keymap


wk.add({
  { "<leader>c", group = "Convert Commands" },
  {
    mode = { "n", "v" },

    {
      "<leader>cgi",
      function()
        require("dial.map").manipulate("increment", "gnormal")
      end
      ,
      desc = "Increment"
    },
    {
      "<leader>cgd",
      function()
        require("dial.map").manipulate("decrement", "gnormal")
      end
      ,
      desc = "Decrement"
    },
  },
})


wk.add({
  { "<leader>l", group = "LSP" },
  {
    mode = { "n", "v" },
    { "<leader>lD", "<cmd>lua vim.lsp.buf.declaration()<CR>",      desc = "vim.lsp.buf.declaration()" },
    { "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<CR>",           desc = "vim.lsp.buf.rename()" },
    { "<leader>l[", "<cmd>lua vim.diagnostic.goto_previous()<CR>", desc = "vim.diagnostic.goto_previous()" },
    { "<leader>l]", "<cmd>lua vim.diagnostic.goto_next()<CR>",     desc = "vim.diagnostic.goto_next()" },
    { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<CR>",      desc = "vim.lsp.buf.code_action()" },
    { "<leader>ld", "<cmd>lua vim.lsp.buf.definition()<CR>",       desc = "vim.lsp.buf.definition()" },
    { "<leader>lf", "<cmd>lua vim.lsp.buf.format()<CR>",           desc = "vim.lsp.buf.format()" },
    { "<leader>li", "<cmd>lua vim.lsp.buf.implementation()<CR>",   desc = "vim.lsp.buf.implementation()" },
    { "<leader>lk", "<cmd>lua vim.lsp.buf.hover()<CR>",            desc = "vim.lsp.buf.hover()" },
    { "<leader>lo", "<cmd>lua vim.diagnostic.open_float()<CR>",    desc = "vim.diagnostic.open_float()" },
    { "<leader>lr", "<cmd>lua vim.lsp.buf.references()<CR>",       desc = "vim.lsp.buf.references()" },
    { "<leader>lt", "<cmd>lua vim.lsp.buf.type_definition()<CR>",  desc = "vim.lsp.buf.type_definition()" },
  },
}
)

if not vim.g.vscode then
  wk.add({
    { "<leader>e",  group = "NvimTree" },
    { "<leader>ee", "<cmd>NvimTreeOpen | NvimTreeFindFile<CR>", desc = "NvimTreeFindFile" },
    { "<leader>ef", "<cmd>NvimTreeFindFile<CR>",                desc = "NvimTreeFindFile" },
    { "<leader>eq", "<cmd>NvimTreeClose<CR>",                   desc = "NvimTreeClose" },
    { "<leader>er", "<cmd>NvimTreeRefresh<CR>",                 desc = "NvimTreeRefresh" },
  })

  wk.add(
    {
      { "<leader>f",  group = "telescope" },
      { "<leader>fF", "<cmd>Telescope file_browser<CR>",                                       desc = "file browser" },
      { "<leader>fb", "<cmd>lua require('telescope.builtin').buffers()<CR>",                   desc = "find buffers" },
      { "<leader>ff", "<cmd>lua require('telescope.builtin').find_files()<CR>",                desc = "find files" },
      { "<leader>fg", "<cmd>lua require('telescope.builtin').live_grep()<CR>",                 desc = "live grep" },
      { "<leader>fy", "<cmd>lua require('neoclip.fzf')({'a', 'star', 'plus', 'unnmaed'})<CR>", desc = "yank" },

    }
  )
  wk.add(
    {
      { "<leader>g",   group = "Git" },
      { "<leader>gg",  "<cmd>LazyGit<CR>",                                       desc = "open lazygit" },
      { "<leader>gs",  "<cmd>lua require('telescope.builtin').git_status()<CR>", desc = "git status files" },
      { "<leader>gb",  "<cmd>BlamerToggle<CR>",                                  desc = "show git blame" },
      { "<leader>gvo", "<cmd>DiffviewOpen<CR>",                                  desc = "show git diff" },
      { "<leader>gvo", "<cmd>DiffviewClose<CR>",                                 desc = "close git diff" },
    }
  )

  wk.add({
    { "<leader>s", group = "Image Commands" },
    {
      mode = { "v" },
      {
        "<leader>sc",
        function()
          require("nvim-silicon").clip()
        end
        ,
        desc = "Silicon save clipboard"
      },
      {
        "<leader>sf",
        function()
          require("nvim-silicon").file()
        end
        ,
        desc = "Silicon save file"
      },
    },
  })

  wk.add({
    { "<leader>m",  group = "Move Commands" },
    { "<leader>mh", "<cmd>HopWord<CR>",     desc = "HopWord" },
  })
else
  vim.keymap.set("n", "<leader>fb", "<Cmd>call VSCodeNotify('workbench.action.quickOpen')<CR>")
  vim.keymap.set("n", "H", "<Cmd>call VSCodeNotify('workbench.action.previousEditor')<CR>")
  vim.keymap.set("n", "L", "<Cmd>call VSCodeNotify('workbench.action.nextEditor')<CR>")
end

================
File: lua/plugins/config/winresizer.lua
================
vim.g.winresizer_start_key = '<C-T>'

================
File: lua/plugins/dein.lua
================
local api = vim.api

local dein_dir = vim.fn.expand('~/.local/share/nvim/dein')
local dein_repo_dir = dein_dir..'/repos/github.com/Shougo/dein.vim'

api.nvim_set_var('dein#install_github_api_token', os.getenv('DEIN_GITHUB_TOKEN'))

if not string.find(api.nvim_get_option('runtimepath'), '/dein.vim') then
  if not (vim.fn.isdirectory(dein_repo_dir) == 1) then
    os.execute('git clone https://github.com/Shougo/dein.vim '..dein_repo_dir)
  end
  api.nvim_set_option('runtimepath', dein_repo_dir..','..api.nvim_get_option('runtimepath'))
end

if (vim.fn['dein#load_state'](dein_dir) == 1) then
  vim.fn['dein#begin'](dein_dir)
  local rc_dir = vim.fn.expand('~/.config/nvim')
  local toml = rc_dir..'/dein.toml'
  local lazy_toml = rc_dir..'/dein_lazy.toml'
  vim.fn['dein#load_toml'](toml, { lazy = 0 })
  vim.fn['dein#load_toml'](lazy_toml, { lazy = 1 })
  vim.fn['dein#end']()
  vim.fn['dein#save_state']()
end

if (vim.fn['dein#check_install']() ~= 0) then
  vim.fn['dein#install']()
end

local removed_plugins = vim.fn['dein#check_clean']()
if vim.fn.len(removed_plugins) > 0 then
  vim.fn.map(removed_plugins, "delete(v:val, 'rf')")
  vim.fn['dein#recache_runtimepath']()
end

================
File: lua/plugins/lazy_plugins.lua
================
local is_vscode = vim.g.vscode

return {
  -- layout
  {
    'EdenEast/nightfox.nvim',
    cond = not is_vscode,
    config = function()
      require('plugins.config.nightfox')
    end,
  },
  { 'catppuccin/nvim',              name = 'catppuccin', priority = 1000 },
  -- windows management
  {
    'simeji/winresizer',
    cond = not is_vscode,
    init = function()
      require('plugins.config.winresizer')
    end,
  },
  {
    'nvim-tree/nvim-tree.lua',
    cond = not is_vscode,
    dependencies = {
      'nvim-tree/nvim-web-devicons',
    },
    cmd = {
      'NvimTreeOpen',
      'NvimTreeClose',
      'NvimTreeFocus',
      'NvimTreeToggle',
    },
    config = function()
      require('plugins.config.nvim-tree')
    end,
  },
  {
    'nvim-lualine/lualine.nvim',
    cond = not is_vscode,
    dependencies = {
      'nvim-tree/nvim-web-devicons',
    },
    config = function()
      require('plugins.config.lualine')
    end,
  },
  {
    'nvim-telescope/telescope.nvim',
    cond = not is_vscode,
    dependencies = {
      'nvim-lua/plenary.nvim',
    },
    -- config = function()
    -- end,
  },
  {
    'nvim-telescope/telescope-fzf-native.nvim',
    cond = not is_vscode,
    build = 'make',
  },
  {
    'nvim-telescope/telescope-file-browser.nvim',
    cond = not is_vscode,
    dependencies = {
      'nvim-telescope/telescope.nvim',
      'nvim-lua/plenary.nvim',
    },
    config = function()
      require('plugins.config.telescope')
    end,
  },
  {
    "AckslD/nvim-neoclip.lua",
    cond = not is_vscode,
    dependencies = {
      { 'nvim-telescope/telescope.nvim' },
      { 'ibhagwan/fzf-lua' },
    },
    config = function()
      require('plugins.config.nvim-neoclip')
    end,
  },
  -- code layout
  {
    'nvim-treesitter/nvim-treesitter',
    config = function()
      require('plugins.config.nvim-treesitter')
    end,
  },
  {
    'nvim-treesitter/nvim-treesitter-context',
  },
  {
    'norcalli/nvim-colorizer.lua',
    config = function()
      require('plugins.config.nvim-colorizer')
    end,
  },
  -- session
  {
    'rmagatti/auto-session',
    cond = not is_vscode,
    config = function()
      require('plugins.config.auto-session')
    end,
  },
  -- git
  {
    'kdheepak/lazygit.nvim',
    dependencies = {
      'nvim-telescope/telescope.nvim',
      'nvim-lua/plenary.nvim',
    },
    config = function()
      require('plugins.config.lazygit')
    end,
  },
  {
    'sindrets/diffview.nvim',
    cond = not is_vscode,
  },
  {
    'akinsho/toggleterm.nvim',
    cond = not is_vscode,
    config = function()
      require('plugins.config.toggleterm')
    end,
  },
  {
    'APZelos/blamer.nvim',
    cond = not is_vscode,
  },
  -- edit action
  {
    'numToStr/Comment.nvim',
    cond = not is_vscode,
    config = function()
      require('plugins.config.comment')
    end,
  },
  {
    'monaqa/dial.nvim',
    config = function()
      require('plugins.config.dial')
    end,
  },
  -- edit viewing
  {
    'petertriho/nvim-scrollbar',
    cond = not is_vscode,
    config = function()
      require('plugins.config.nvim-scrollbar')
    end,
  },
  {
    'andymass/vim-matchup',
    event = 'CursorMoved',
    config = function()
      require('plugins.config.vim-matchup')
    end,
  },
  {
    'folke/which-key.nvim',
    event = 'VeryLazy',
    init = function()
      vim.o.timeout = true
      vim.o.timeoutlen = 300
    end,
    config = function()
      require('plugins.config.which-key')
    end,
    dependencies = {
      'echasnovski/mini.icons',
    },
  },
  -- move
  {
    'hadronized/hop.nvim',
    config = function()
      require('plugins.config.hop')
    end,
  },
  {
    'rhysd/clever-f.vim',
  },
  -- lsp
  {
    'williamboman/mason.nvim',
    cond = not is_vscode,
    config = function()
      require('plugins.config.mason')
    end,
    dependencies = {
      'williamboman/mason-lspconfig.nvim',
      'neovim/nvim-lspconfig',
    },
  },
  { "tamago324/nlsp-settings.nvim", cmd = "LspSettings", lazy = true },
  {
    "jay-babu/mason-null-ls.nvim",
    cond = not is_vscode,
    event = { "BufReadPre", "BufNewFile" },
    dependencies = {
      "williamboman/mason.nvim",
      'nvimtools/none-ls.nvim',
    },
    config = function()
      local null_ls = require("null-ls")
      local home = vim.fn.expand("$HOME")
      null_ls.setup({
        fallback_severity = vim.diagnostic.severity.HINT,
        sources = {
          null_ls.builtins.formatting.google_java_format,
          null_ls.builtins.diagnostics.checkstyle.with({
            diagnostics_postprocess = function(diagnostic)
              diagnostic.severity = vim.diagnostic.severity.HINT
            end,
            extra_args = { "-c", home .. "/dev/lib/google_checks.xml" },
          }),
        },
        -- debug = true
      })
      require("mason-null-ls").setup({
        handlers = {},
      })
    end,
  },
  -- {
  --   "nvimtools/none-ls.nvim",
  --   dependencies = {
  --   "jay-babu/mason-null-ls.nvim",
  --     "gbprod/none-ls-shellcheck.nvim", -- shellcheck
  --     "nvimtools/none-ls-extras.nvim",  -- eslint_d
  --   },
  --   config = function()
  --     -- https://github.com/nvimtools/none-ls.nvim/blob/main/doc/BUILTINS.md
  --     local null_ls = require("null-ls")
  --     local home = vim.fn.expand("$HOME")
  --     null_ls.setup({
  --       fallback_severity = vim.diagnostic.severity.HINT,
  --       sources = {
  --         null_ls.builtins.formatting.google_java_format,
  --         null_ls.builtins.diagnostics.checkstyle.with({
  --           diagnostics_postprocess = function(diagnostic)
  --             diagnostic.severity = vim.diagnostic.severity.HINT
  --           end,
  --           extra_args = { "-c", home .. "/dev/lib/google_checks.xml" },
  --         }),
  --       },
  --       -- debug = true
  --     })
  --     require('mason-null-ls').setup({
  --       automatic_setup = true,
  --       handlers = {},
  --     })
  --   end
  -- },

  -- dap
  {
    "mfussenegger/nvim-dap",
    cond = not is_vscode,
    config = function()
      require("plugins.config.nvim-dap").setup()
    end,
    lazy = true,
    dependencies = {
      "rcarriga/nvim-dap-ui",
    },
  },

  -- Debugger user interface
  {
    "rcarriga/nvim-dap-ui",
    cond = not is_vscode,
    config = function()
      require("plugins.config.nvim-dap").setup_ui()
    end,
    lazy = true,
  },
  -- cmp
  {
    'hrsh7th/nvim-cmp',
    cond = not is_vscode,
    event = 'InsertEnter',
    config = function()
      require('plugins.config.nvim-cmp')
    end,
  },
  {
    'hrsh7th/cmp-nvim-lsp',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-buffer',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-path',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-vsnip',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-cmdline',
    cond = not is_vscode,
    event = 'ModeChanged',
  },
  {
    'hrsh7th/cmp-nvim-lsp-signature-help',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-nvim-lsp-document-symbol',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-calc',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/cmp-emoji',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'onsails/lspkind.nvim',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/vim-vsnip',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'hrsh7th/vim-vsnip-integ',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  {
    'rafamadriz/friendly-snippets',
    cond = not is_vscode,
    event = 'InsertEnter',
  },
  -- images
  {
    "michaelrommel/nvim-silicon",
    cond = not is_vscode,
    lazy = true,
    cmd = "Silicon",
    main = "nvim-silicon",
    opts = {
      -- Configuration here, or leave empty to use defaults
      line_offset = function(args)
        return args.line1
      end,
      to_clipboard = true,
      font = 'Cica',
      background = '#fff0',
      pad_horiz = 50,
      pad_vert = 40,
    }
  },
  -- dev
  {
    'akinsho/flutter-tools.nvim',
    cond = not is_vscode,
    lazy = false,
    dependencies = {
      'nvim-lua/plenary.nvim',
      'stevearc/dressing.nvim', -- optional for vim.ui.select
    },
    config = function()
      require('plugins.config.flutter-tools')
    end,
  },
  {
    'yetone/avante.nvim',
    cond = not is_vscode,
    event = 'VeryLazy',
    lazy = false,
    version = false, -- Set this to '*' to always pull the latest release version, or set it to false to update to the latest code changes.
    opts = {
      -- add any opts here
    },
    -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
    build = 'make',
    -- build = 'powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false' -- for windows
    dependencies = {
      'stevearc/dressing.nvim',
      'nvim-lua/plenary.nvim',
      'MunifTanjim/nui.nvim',
      --- The below dependencies are optional,
      'hrsh7th/nvim-cmp',            -- autocompletion for avante commands and mentions
      'nvim-tree/nvim-web-devicons', -- or echasnovski/mini.icons
      'zbirenbaum/copilot.lua',      -- for providers='copilot'
      {
        -- support for image pasting
        'HakonHarnes/img-clip.nvim',
        event = 'VeryLazy',
        opts = {
          -- recommended settings
          default = {
            embed_image_as_base64 = false,
            prompt_for_file_name = false,
            drag_and_drop = {
              insert_mode = true,
            },
            -- required for Windows users
            use_absolute_path = true,
          },
        },
      },
    },
  },
  {
    "folke/lazydev.nvim",
    ft = "lua", -- only load on lua files
    opts = {
      library = {
        -- See the configuration section for more details
        -- Load luvit types when the `vim.uv` word is found
        { path = "${3rd}/luv/library", words = { "vim%.uv" } },
      },
    },
  },
}

================
File: lua/.luarc.json
================
{
    "diagnostics.globals": [
        "vim"
    ]
}

================
File: init.lua
================
require('core.init')
require('core.options')
require('core.plugins')
require('core.keys')

================
File: lazy-lock.json
================
{
  "Comment.nvim": { "branch": "master", "commit": "e30b7f2008e52442154b66f7c519bfd2f1e32acb" },
  "auto-session": { "branch": "main", "commit": "82630e2f70be140f8dcc75a12e2ee2839e8488c2" },
  "avante.nvim": { "branch": "main", "commit": "63136fd92f2f2e9cf91b231dc19ac2c95e3897ed" },
  "blamer.nvim": { "branch": "master", "commit": "e0d43c11697300eb68f00d69df8b87deb0bf52dc" },
  "catppuccin": { "branch": "main", "commit": "4965db2d6155c25db4e8417465fc2703fdf4c2b7" },
  "clever-f.vim": { "branch": "master", "commit": "6a3ac5e3688598af9411ab741737f98c47370c22" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-calc": { "branch": "main", "commit": "5947b412da67306c5b68698a02a846760059be2e" },
  "cmp-cmdline": { "branch": "main", "commit": "d250c63aa13ead745e3a40f61fdd3470efde3923" },
  "cmp-emoji": { "branch": "main", "commit": "e8398e2adf512a03bb4e1728ca017ffeac670a9f" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "cmp-nvim-lsp-document-symbol": { "branch": "main", "commit": "f94f7ba948e32cd302caba1c2ca3f7c697fb4fcf" },
  "cmp-nvim-lsp-signature-help": { "branch": "main", "commit": "031e6ba70b0ad5eee49fd2120ff7a2e325b17fa7" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp-vsnip": { "branch": "main", "commit": "989a8a73c44e926199bfd05fa7a516d51f2d2752" },
  "copilot.lua": { "branch": "master", "commit": "886ee73b6d464b2b3e3e6a7ff55ce87feac423a9" },
  "dial.nvim": { "branch": "master", "commit": "34bbd9c387c358190e61ce71017faad3dffa7a74" },
  "diffview.nvim": { "branch": "main", "commit": "4516612fe98ff56ae0415a259ff6361a89419b0a" },
  "dressing.nvim": { "branch": "master", "commit": "56ef6a969a4990d938c5fed40c370f65e125fc97" },
  "flutter-tools.nvim": { "branch": "main", "commit": "26c511d5009c87c740a544e2c9d4139aff18a692" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "fzf-lua": { "branch": "main", "commit": "8a63c9e7998a51319c3cc118bb38241c18acc9c8" },
  "hop.nvim": { "branch": "master", "commit": "1a1eceafe54b5081eae4cb91c723abd1d450f34b" },
  "img-clip.nvim": { "branch": "main", "commit": "5ded6f468d633ccfb315905fe8901d6c95ae8f29" },
  "lazy.nvim": { "branch": "main", "commit": "f15a93907ddad3d9139aea465ae18336d87f5ce6" },
  "lazydev.nvim": { "branch": "main", "commit": "a1b78b2ac6f978c72e76ea90ae92a94edf380cfc" },
  "lazygit.nvim": { "branch": "main", "commit": "adc37c5a6d7d6e8d0a039f08f3c7837971a1c77a" },
  "lspkind.nvim": { "branch": "master", "commit": "d79a1c3299ad0ef94e255d045bed9fa26025dab6" },
  "lualine.nvim": { "branch": "master", "commit": "f4f791f67e70d378a754d02da068231d2352e5bc" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "f75e877f5266e87523eb5a18fcde2081820d087b" },
  "mason-null-ls.nvim": { "branch": "main", "commit": "de19726de7260c68d94691afb057fa73d3cc53e7" },
  "mason.nvim": { "branch": "main", "commit": "e2f7f9044ec30067bc11800a9e266664b88cda22" },
  "mini.icons": { "branch": "main", "commit": "ec61af6e606fc89ee3b1d8f2f20166a3ca917a36" },
  "nightfox.nvim": { "branch": "main", "commit": "ba47d4b4c5ec308718641ba7402c143836f35aa9" },
  "nlsp-settings.nvim": { "branch": "main", "commit": "aefe075fbd0f244ec5f8104451affdfaecb8f9cb" },
  "none-ls.nvim": { "branch": "main", "commit": "02f5275d8a5546092f01306f162c00c71d6e0281" },
  "nui.nvim": { "branch": "main", "commit": "53e907ffe5eedebdca1cd503b00aa8692068ca46" },
  "nvim-cmp": { "branch": "main", "commit": "12509903a5723a876abd65953109f926f4634c30" },
  "nvim-colorizer.lua": { "branch": "master", "commit": "a065833f35a3a7cc3ef137ac88b5381da2ba302e" },
  "nvim-dap": { "branch": "master", "commit": "52302f02fea3a490e55475de52fa4deb8af2eb11" },
  "nvim-dap-ui": { "branch": "master", "commit": "bc81f8d3440aede116f821114547a476b082b319" },
  "nvim-lspconfig": { "branch": "master", "commit": "6c17f8656f667727b27f5f598463afedb7791b18" },
  "nvim-neoclip.lua": { "branch": "main", "commit": "831a97c7697736411a05ff8b91e8798ea4c2d6fb" },
  "nvim-scrollbar": { "branch": "main", "commit": "6994eb9f73d5fdc36ee2c8717940e8c853e51a49" },
  "nvim-silicon": { "branch": "main", "commit": "7f66bda8f60c97a5bf4b37e5b8acb0e829ae3c32" },
  "nvim-tree.lua": { "branch": "master", "commit": "80523101f0ae48b7f1990e907b685a3d79776c01" },
  "nvim-treesitter": { "branch": "master", "commit": "a840137349fcc35b5ad2c718a9b034b93012fa43" },
  "nvim-treesitter-context": { "branch": "master", "commit": "03f382ef224c27a8508cdab2d0b463dcb8ca12a6" },
  "nvim-web-devicons": { "branch": "master", "commit": "402377242b04be3f4f0f3720bd952df86e946c30" },
  "plenary.nvim": { "branch": "master", "commit": "3707cdb1e43f5cea73afb6037e6494e7ce847a66" },
  "telescope-file-browser.nvim": { "branch": "master", "commit": "626998e5c1b71c130d8bc6cf7abb6709b98287bb" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "dae2eac9d91464448b584c7949a31df8faefec56" },
  "telescope.nvim": { "branch": "master", "commit": "415af52339215926d705cccc08145f3782c4d132" },
  "toggleterm.nvim": { "branch": "main", "commit": "e76134e682c1a866e3dfcdaeb691eb7b01068668" },
  "vim-matchup": { "branch": "master", "commit": "aca23ce53ebfe34e02c4fe07e29e9133a2026481" },
  "vim-vsnip": { "branch": "master", "commit": "02a8e79295c9733434aab4e0e2b8c4b7cea9f3a9" },
  "vim-vsnip-integ": { "branch": "master", "commit": "90ae474e8b05ed41e36d6f58382a9fbfb4b672c4" },
  "which-key.nvim": { "branch": "main", "commit": "0e76a87ac51772569aec678dc74baa8e2a86100c" },
  "winresizer": { "branch": "master", "commit": "9bd559a03ccec98a458e60c705547119eb5350f3" }
}

================
File: luarc.json
================
{
  "diagnostics": {
    "globals": ["vim"],
  }
}
